name: "Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-draft-release:
    name: "Create Draft Release"
    runs-on: "ubuntu-latest"
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@v5"

      - name: "Gather tag name and version"
        id: info
        shell: bash
        run: |
          {
            if [ -z '${{ inputs.version }}' ]; then
              echo >&2 "No version provided. Using the tag name as version."
              tag_name='${{ github.ref_name }}'
              echo "tag_name=${tag_name}"
              echo "version=${tag_name#v}" # Remove 'v' prefix if present
            else
              echo "version=${{ inputs.version }}"
              echo "tag_name=v${{ inputs.version }}"
            fi
          } | tee "$GITHUB_OUTPUT"

      - name: "Generate changelog"
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: ""
          args: --verbose --unreleased --strip=header --config-url=https://raw.githubusercontent.com/orhun/git-cliff/refs/heads/main/examples/github.toml
        env:
          GITHUB_REPO: ${{ github.repository }}
          GIT_CLIFF_TAG: ${{ steps.info.outputs.tag_name }}

      - name: "Create Draft Release"
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          body: ${{ steps.git-cliff.outputs.content }}
          tag_name: ${{ steps.info.outputs.tag_name }}
          target_commitish: '${{ github.sha }}'

  prepare:
    needs: create-draft-release
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      domain: ${{ steps.info.outputs.domain }}
      component_dir: ${{ steps.info.outputs.component_dir }}
      hacs_filename: ${{ steps.info.outputs.hacs_filename }}
      version: ${{ steps.info.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Gather information
        id: info
        shell: bash
        run: |
          {
            domain="$(yq -r -oj '.domain' custom_components/*/manifest.json)"
            if [ -z "$domain" ]; then
              echo >&2 "No domain found in manifest.json. Please check your custom component."
              exit 1
            fi
            hacs_filename="$(yq -r '.filename' hacs.json)"
            if [ -z "$hacs_filename" ]; then
              echo >&2 "No filename found in hacs.json. Please check your HACS configuration."
              exit 1
            fi

            echo "domain=${domain}"
            echo "component_dir=custom_components/${domain}"
            echo "hacs_filename=${hacs_filename}"

            if [ -z '${{ inputs.version }}' ]; then
              echo >&2 "No version provided. Using the tag name as version."
              tag_name='${{ github.ref_name }}'
              echo "version=${tag_name#v}" # Remove 'v' prefix if present
            else
              echo "version=${{ inputs.version }}"
            fi

          } | tee "$GITHUB_OUTPUT"

      - name: Sanity check
        shell: bash
        run: |
          # Ensure version matches semver (e.g., 1.2.3, 1.2.3-beta.1)
          if ! [[ "${{ steps.info.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$ ]]; then
            echo "Error: Version '${{ steps.info.outputs.version }}' does not match SemVer format (e.g., 1.2.3 or 1.2.3-beta.1)."
            exit 1
          fi
      
      - name: "Build the integration"
        shell: "bash"
        run: |
          # Update version
          yq -i -o json '.version="${{ steps.info.outputs.version }}"' '${{ steps.info.outputs.component_dir }}/manifest.json'
          # Archive
          cd '${{ steps.info.outputs.component_dir }}'
          zip '${{ steps.info.outputs.hacs_filename }}' -r ./

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.info.outputs.hacs_filename }}
          path: '${{ steps.info.outputs.component_dir }}/${{ steps.info.outputs.hacs_filename }}'

  upload:
    needs: [create-draft-release, prepare]
    runs-on: ubuntu-latest
    name: "Upload Release Asset"
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.hacs_filename }}
      - name: "Upload Release Asset"
        id: upload-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-draft-release.outputs.upload_url }}
          asset_name: ${{ needs.prepare.outputs.hacs_filename }}
          asset_path: ${{ needs.prepare.outputs.hacs_filename }}
          asset_content_type: application/zip

  release:
    needs: upload
    name: "Publish Release"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Publish Draft Release"
        id: publish-release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.create-draft-release.outputs.release_id }}',
              draft: false,
            })
